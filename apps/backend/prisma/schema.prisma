datasource database {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

generator docs {
    provider = "node node_modules/prisma-docs-generator"
    output   = "../docs"
}

/// Possible roles for a user
enum Role {
    User
    Admin
}

/// Possible memberships for a user
enum Membership {
    Free
    Premium
}

/// Possible types of a media
enum MediaType {
    Image
    Video
    Audio
    Document
    Other
}

/// A media is a file used in a website or a template
type Media {
    name      String?   @default("Untitled")
    type      MediaType
    uri       String
    createdAt DateTime  @default(now())
}

/// A user of the application
model User {
    id             String     @id @default(auto()) @map("_id") @database.ObjectId
    isVerified     Boolean    @default(false)
    role           Role       @default(User)
    username       String     @unique(sort: Asc)
    email          String     @unique(sort: Asc)
    password       String
    firstName      String?
    lastName       String?
    profilePicture Media?
    membership     Membership @default(Free)
    lastLogin      DateTime?
    createdAt      DateTime   @default(now())

    /// Websites and templates created by the user
    websites  Website[]
    templates Template[]

    @@map("users")
}

/// A website created by a user using the editor
model Website {
    id        String   @id @default(auto()) @map("_id") @database.ObjectId
    /// The title of the website in the browser tab
    title     String   @default("Untitled")
    url       String   @unique
    /// The JSON string representing the structure of the website
    tree      String
    createdAt DateTime @default(now())

    /// Medias used in the website
    medias Media[]

    author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId   String    @database.ObjectId
    /// The template used in the website
    template   Template? @relation(fields: [templateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    templateId String?   @database.ObjectId

    @@map("websites")
}

/// A template created by a user using the editor, and that can be used to create websites
model Template {
    id        String   @id @default(auto()) @map("_id") @database.ObjectId
    name      String   @unique(sort: Asc)
    isPublic  Boolean  @default(false)
    /// The JSON string representing the structure of the template
    tree      String
    createdAt DateTime @default(now())
    /// Number of likes the template has received
    likes     Int      @default(0)

    /// Medias used in the template
    medias        Media[]
    /// Websites created using the template
    websitesUsing Website[]

    author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    authorId String? @database.ObjectId

    @@map("templates")
}
